import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import Link from "next/link";
import { gql } from "@apollo/client";
import { getApolloClient } from "../lib/apollo-client";
import styles from '@/styles/Home.module.css'
import FormValidation from '@/components/Form';

const inter = Inter({ subsets: ['latin'] })

export default function Home({ page, posts }) {
  const { title, description } = page;
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="">
        <ul className="">
          {posts &&
            posts.length > 0 &&
            posts.map((post) => {
              return (
                <li key={post.slug} className="">
                  <Link href={post.path}>
                    <h3
                      dangerouslySetInnerHTML={{
                        __html: post.title,
                      }}
                    />
                    <div
                      className=""
                      dangerouslySetInnerHTML={{
                        __html: post.excerpt,
                      }}
                    />
                  </Link>
                </li>
              );
            })}

          {!posts ||
            (posts.length === 0 && (
              <li>
                <p>Oops, no posts found!</p>
              </li>
            ))}
        </ul>
        <FormValidation />
      </main>
    </>
  )
}

export async function getStaticProps({ locale }) {
  const apolloClient = getApolloClient();

  const language = locale.toUpperCase();

  const data = await apolloClient.query({
    query: gql`
      query posts($language: LanguageCodeFilterEnum!) {
        posts(where: { language: $language }, first:2) {
          edges {
            node {
              id
              excerpt
              title
              slug
              language {
                code
                locale
              }
            }
          }
        }
        generalSettings {
          title
          description
        }
      }
    `,
    variables: {
      language,
    },
  });

  let posts = data?.data.posts.edges

    .map(({ node }) => node)
    .map((post) => {
      return {
        ...post,
        language,
        path: `/posts/${post.slug}`,
      };
    });

  const page = {
    ...data?.data.generalSettings,
  };

  return {
    props: {
      page,
      posts,
    },
    revalidate: 5
  };
}